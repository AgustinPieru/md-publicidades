#!/bin/bash

# Script para verificar el estado de los servicios
# MD Publicidades - Health Check

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Verificando estado de los servicios...${NC}"

# Verificar si los puertos est√°n en uso
check_port() {
    local port=$1
    local service=$2
    
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null ; then
        echo -e "${GREEN}‚úÖ Puerto $port ($service) est√° en uso${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Puerto $port ($service) no est√° en uso${NC}"
        return 1
    fi
}

# Verificar servicios
echo -e "${YELLOW}üìä Verificando puertos...${NC}"
check_port 3000 "Frontend (Vite)"
check_port 3001 "Backend (Express)"
check_port 5432 "PostgreSQL"

echo ""

# Verificar si Docker est√° ejecut√°ndose
if docker ps | grep -q "md-publicidades-postgres"; then
    echo -e "${GREEN}‚úÖ PostgreSQL (Docker) est√° ejecut√°ndose${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL (Docker) no est√° ejecut√°ndose${NC}"
    echo -e "${YELLOW}üí° Ejecuta: docker-compose up postgres -d${NC}"
fi

echo ""

# Verificar endpoints del backend
echo -e "${YELLOW}üåê Verificando endpoints del backend...${NC}"

if curl -s http://localhost:3001/health > /dev/null; then
    echo -e "${GREEN}‚úÖ Backend health check: OK${NC}"
    
    # Verificar endpoint de novedades
    if curl -s http://localhost:3001/api/novedades > /dev/null; then
        echo -e "${GREEN}‚úÖ Endpoint /api/novedades: OK${NC}"
    else
        echo -e "${RED}‚ùå Endpoint /api/novedades: ERROR${NC}"
    fi
    
    # Verificar endpoint de auth
    if curl -s -X POST http://localhost:3001/api/auth/login -H "Content-Type: application/json" -d '{"email":"test","password":"test"}' > /dev/null; then
        echo -e "${GREEN}‚úÖ Endpoint /api/auth/login: OK${NC}"
    else
        echo -e "${RED}‚ùå Endpoint /api/auth/login: ERROR${NC}"
    fi
else
    echo -e "${RED}‚ùå Backend no responde en http://localhost:3001${NC}"
fi

echo ""

# Verificar frontend
echo -e "${YELLOW}üåê Verificando frontend...${NC}"

if curl -s http://localhost:3000 > /dev/null; then
    echo -e "${GREEN}‚úÖ Frontend est√° ejecut√°ndose en http://localhost:3000${NC}"
else
    echo -e "${RED}‚ùå Frontend no responde en http://localhost:3000${NC}"
fi

echo ""

# Verificar base de datos
echo -e "${YELLOW}üóÑÔ∏è  Verificando base de datos...${NC}"

if docker exec md-publicidades-postgres psql -U postgres -d md_publicidades -c "SELECT 1;" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Conexi√≥n a PostgreSQL: OK${NC}"
    
    # Verificar si las tablas existen
    if docker exec md-publicidades-postgres psql -U postgres -d md_publicidades -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';" | grep -q "novedad"; then
        echo -e "${GREEN}‚úÖ Tabla 'novedad' existe${NC}"
    else
        echo -e "${RED}‚ùå Tabla 'novedad' no existe${NC}"
        echo -e "${YELLOW}üí° Ejecuta: npm run db:push --workspace=backend${NC}"
    fi
    
    if docker exec md-publicidades-postgres psql -U postgres -d md_publicidades -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';" | grep -q "admin"; then
        echo -e "${GREEN}‚úÖ Tabla 'admin' existe${NC}"
    else
        echo -e "${RED}‚ùå Tabla 'admin' no existe${NC}"
        echo -e "${YELLOW}üí° Ejecuta: npm run db:push --workspace=backend${NC}"
    fi
else
    echo -e "${RED}‚ùå No se puede conectar a PostgreSQL${NC}"
fi

echo ""

# Resumen y recomendaciones
echo -e "${BLUE}üìã Resumen y recomendaciones:${NC}"
echo ""

if check_port 3000 "Frontend" && check_port 3001 "Backend" && check_port 5432 "PostgreSQL"; then
    echo -e "${GREEN}üéâ Todos los servicios est√°n ejecut√°ndose correctamente${NC}"
    echo ""
    echo -e "${BLUE}üîó URLs disponibles:${NC}"
    echo -e "   Frontend: http://localhost:3000"
    echo -e "   Backend: http://localhost:3001"
    echo -e "   Health Check: http://localhost:3001/health"
    echo ""
    echo -e "${BLUE}üîë Para acceder al admin:${NC}"
    echo -e "   1. Ve a: http://localhost:3000/admin/login"
    echo -e "   2. Usa las credenciales del archivo .env"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Si no puedes navegar a /admin/novedades/nueva:${NC}"
    echo -e "   1. Verifica que est√©s autenticado como admin"
    echo -e "   2. Revisa la consola del navegador (F12)"
    echo -e "   3. Verifica que el token est√© en localStorage"
else
    echo -e "${RED}‚ùå Algunos servicios no est√°n ejecut√°ndose${NC}"
    echo ""
    echo -e "${YELLOW}üöÄ Para iniciar los servicios:${NC}"
    echo -e "   npm run dev"
    echo ""
    echo -e "${YELLOW}üê≥ Para iniciar solo la base de datos:${NC}"
    echo -e "   docker-compose up postgres -d"
fi

